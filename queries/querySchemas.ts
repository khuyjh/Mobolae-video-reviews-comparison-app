/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
/**
 * @format int32
 * @example 1
 */
export type Id = number;

/**
 * @example https://example.com/...
 * @format url
 * @pattern ^https?://.+
 */
export type UrlType = string;

export type User = {
  /**
   * @format date-time
   */
  updatedAt: string;
  /**
   * @format date-time
   */
  createdAt: string;
  teamId: string;
  /**
   * @example https://example.com/...
   * @format url
   * @pattern ^https?://.+
   */
  image: UrlType | null;
  description: string;
  nickname: string;
  id: Id;
};

export type UserDetail = User & {
  mostFavoriteCategory: {
    name: string;
    id: Id;
  } | null;
  /**
   * @format double
   */
  averageRating: number;
  /**
   * @format double
   */
  reviewCount: number;
  /**
   * @format double
   */
  followeesCount: number;
  /**
   * @format double
   */
  followersCount: number;
  isFollowing: boolean;
};

/**
 * @example 닉네임
 * @minLength 1
 * @maxLength 20
 */
export type Nickname = string;

export type UpdateUserRequestBody = {
  /**
   * @example 안녕하세요
   * @maxLength 300
   */
  description?: string;
  nickname?: Nickname;
  image?: UrlType;
};

export type UserRanking = User & {
  /**
   * @format double
   */
  reviewCount: number;
  /**
   * @format double
   */
  followersCount: number;
};

export type ProductListType = {
  /**
   * @format date-time
   */
  updatedAt: string;
  /**
   * @format date-time
   */
  createdAt: string;
  writerId: Id;
  categoryId: Id;
  /**
   * @format double
   */
  favoriteCount: number;
  /**
   * @format double
   */
  reviewCount: number;
  /**
   * @format double
   */
  rating: number;
  image: UrlType;
  name: string;
  id: Id;
};

export type CursorBasedPaginationResponseProductListType = {
  /**
   * @format double
   */
  nextCursor: number | null;
  list: ProductListType[];
};

export type CursorBasedPaginationResponseIdNumberFolloweeUser = {
  /**
   * @format double
   */
  nextCursor: number | null;
  list: {
    followee: User;
    /**
     * @format double
     */
    id: number;
  }[];
};

export type CursorBasedPaginationResponseIdNumberFollowerUser = {
  /**
   * @format double
   */
  nextCursor: number | null;
  list: {
    follower: User;
    /**
     * @format double
     */
    id: number;
  }[];
};

export type Review = {
  user: {
    /**
     * @example https://example.com/...
     * @format url
     * @pattern ^https?://.+
     */
    image: UrlType | null;
    nickname: string;
    id: Id;
  };
  reviewImages: {
    source: UrlType;
    id: Id;
  }[];
  productId: Id;
  userId: Id;
  /**
   * @format date-time
   */
  updatedAt: string;
  /**
   * @format date-time
   */
  createdAt: string;
  isLiked: boolean;
  /**
   * @format double
   */
  likeCount: number;
  content: string;
  /**
   * @format double
   */
  rating: number;
  id: Id;
};

/**
 * @format float
 * @minimum 1
 * @maximum 5
 */
export type Rating = number;

/**
 * @minLength 1
 * @maxLength 300
 */
export type ReviewContent = string;

export type CreateReviewRequestBody = {
  productId: Id;
  /**
   * 이미지 URL 입니다. 최대 3개까지 가능합니다.
   *
   * @maxItems 3
   */
  images?: UrlType[];
  content: ReviewContent;
  rating: Rating;
};

export type UpdateReviewRequestBody = {
  /**
   * 기존 이미지를 유지하려면 id를, 새로운 이미지를 추가하려면 source를 넣어주세요. <br />
   * 요청에 포함되지 않는 기존 이미지는 삭제됩니다.
   *
   * @maxItems 3
   */
  images?: (
    | {
        id: Id;
      }
    | {
        source: UrlType;
      }
  )[];
  content?: ReviewContent;
  rating?: Rating;
};

export type SearchProductResponse = CursorBasedPaginationResponseProductListType;

export type ProductDetailType = ProductListType & {
  /**
   * 동일 카테고리 지표
   */
  categoryMetric: {
    /**
     * @format double
     */
    reviewCount: number;
    /**
     * @format double
     */
    favoriteCount: number;
    /**
     * @format double
     */
    rating: number;
  };
  category: {
    name: string;
    id: Id;
  };
  isFavorite: boolean;
  description: string;
};

/**
 * 상품 이름
 *
 * @example 상품 이름
 * @minLength 1
 * @maxLength 20
 */
export type ProductName = string;

/**
 * 상품 설명
 *
 * @example 상품 설명, 최소 10자 이상, 최대 500자 이하
 * @minLength 10
 * @maxLength 500
 */
export type ProductDescription = string;

export type CreateProductRequestBody = {
  categoryId: Id;
  image: UrlType;
  description: ProductDescription;
  name: ProductName;
};

export type UpdateProductRequestBody = {
  categoryId: Id;
  image: UrlType;
  description: ProductDescription;
  name: ProductName;
};

export type CursorBasedPaginationResponseReview = {
  /**
   * @format double
   */
  nextCursor: number | null;
  list: Review[];
};

export type ListReviewResponse = CursorBasedPaginationResponseReview;

export type OauthApp = {
  /**
   * @format date-time
   */
  createdAt: string;
  /**
   * @format date-time
   */
  updatedAt: string;
  appKey: string;
  provider: string;
  teamId: string;
  id: Id;
};

export type OauthProvider = 'google' | 'kakao';

export type UpsertOauthAppRequestBody = {
  /**
   * 간편 로그인을 위한 인증 키 입니다.
   * Google 의 경우에는 "클라이언트 id" 입니다.
   * Kakao 의 경우에는 "REST API 키" 입니다.
   * 실습을 위해 발급받은 키를 등록해주세요. 실제 서비스에서 사용 하는 키는 등록하시면 안됩니다.
   */
  appKey: string;
  provider: OauthProvider;
};

export type FollowRequestBody = {
  /**
   * 팔로우할 유저의 id
   */
  userId: Id;
};

export type Category = {
  /**
   * @format date-time
   */
  updatedAt: string;
  /**
   * @format date-time
   */
  createdAt: string;
  name: string;
  id: Id;
};

/**
 * @example example@email.com
 * @format email
 * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
 */
export type Email = string;

export type SignUpResponse = {
  accessToken: string;
  user: User & {
    email: Email;
  };
};

/**
 * @example password
 * @minLength 8
 * @pattern ^([a-z]|[A-Z]|[0-9]|[!@#$%^&*])+$
 */
export type Password = string;

export type SignUpRequestBody = {
  passwordConfirmation: Password;
  password: Password;
  nickname: Nickname;
  email: Email;
};

export type SignInResponse = {
  accessToken: string;
  user: User & {
    email: Email;
  };
};

export type SignInRequestBody = {
  password: Password;
  email: Email;
};

/**
 * 간편 로그인 과정을 통해 발급받은 토큰입니다.<br />
 * Google 의 경우에는 <b>Google Id 토큰</b>(JWT) 입니다.<br/>
 * Kakao 의 경우에는 <b>인가 코드</b> 입니다.
 */
export type OauthToken = string;

export type SignInWithOauthRequestBody = {
  /**
   * Kakao 의 경우에는 필수입니다.<br/>
   * 인가 코드를 얻을 때 사용하였던 redirect_uri 값을 그대로 사용합니다.
   *
   * @example http://localhost:3000/oauth/kakao
   */
  redirectUri?: string;
  token: OauthToken;
};

export type SignUpWithOauthRequestBody = {
  nickname: Nickname;
} & SignInWithOauthRequestBody;
